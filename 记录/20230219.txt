事务
事务具有ACID 一致性原子性格
redis是不保证原子性的
redis单条命令是保证原子性的，但是事务不保证原子性
事务就是一组命令的集合 先当与队列
执行事务的时候，一个事务中所有的命令都需要被序列化，会按照顺序执行
一次性，顺序性，排他性 执行一系列的命令
redis没有隔离级别的概念
所有的命令在事务中没有直接被执行，只有在发起执行命令之后才会执行
redis事务：开启事务multi，命令入队，执行事务exec
redis可以实现乐观锁

正常执行事务
multi 开启事务
set k1 v1
set k2 v3
get k2
set k3 v3
exec 执行事务

放弃事务
discard 取消事务 事务中的命令都不会被执行

编译型异常-事务中所有的命令都不会被执行
运行时异常-如果队列中存在语法性错误，那么执行命令时，其他命令是可以正常执行的

multi
set k1 v1 
set k2 v2
set k3 v3
getset k3 错误
set k4 v4
set k5 v5 执行事务出错
exec 
get k5 所有的命令都没有被执行

flushdb
set k1 "v1"
multi
incr k1
set k2 v2
set k3 v3
get k3
exec 自己的写法有问题其他的还是可以正常执行的
虽然第一条命令报错了，但是事务依然执行成功了

悲观锁：认为什么时候都会出问题，无论什么时候都会加上锁
乐观锁：很乐观，他认为什么时候都不会出现问题，更新数据的时候判断一下，在此期间检查是否有人修改这个数据
version
更新的时候比较version
redis的监视测速
set money 200
set out 0
watch money
multi
decrby money 20
incrby out 20
exec 执行之前，另外一个线程修改了我们的值，就会导致修改失败

同时使用两个客户端向redis服务器发送事务提交，两个线程同时变动同一个值
测试多线程修改值，使用watch可以当作redis的乐观锁操作

如果值变了之后，要重新监视
unwatch
watch money
decrby money 10
incrby out 10
unwatch
watch money 
multi
decrby money
incrby out 1
exec
本质是比监视的值是否发生了变化，如果没有变化那么可以执行成功，如果变化了就执行失败
如果修改失败，获取最新的值就好

dedis是redis官方推荐的java连接开发工具，相当于中间件
一定要对jedis十分熟悉
首先要导入对应的依赖进行编码测试
1.连接数据库
2.操作命令
3.断开连接
直接创建jedis对象
Jedis jedis = new Jedis();
jedis类是调用的redis.clients.jedis.Jedis
构造方法里面有主机还有端口号，也可以直接填主机地址或者端口号反正好几种，还能填ssl安全验证的真假
Jedis jedis = new Jedis("127.0.0.1",6379);
之后直接用jedis对象直接调用和之前学的redis指令一样的方法（同名方法）就好使了
比如说jedis.ping()就可以PONG了
常用api有String，List，Set，Hash，Zset
所有的api命令就是之前学的那些指令，三个特殊类型也是有的

一般执行完要用jedis.close()关闭连接
使用jedis.multi()开启事务
我们可以使用try来控制事务的exec()或是discard()-catch里discard()
jedis.watch("k1")

springboot中新版使用的中间件底层是lettuce了，lettuce采用netty，实现可以多个线程中进行共享，不存在线程不安全的情况了，可以减少线程数据了，更像NIO模式
直接用redisTemplate操作不同的数据类型，api和我们的指令是一样的
redisConnection connection = redisTemplate.getConnectionFactory().getConnection();
connection.flushDb()
redisTemplate.opsForValue().set("myKey","kuangshen")
System.out.println(redisTemplate.opsForValue().get("mykey"))

如果说往里面存中文的话，在idea里面读出来是正常的中文，但是在redis客户查看是编码，是因为值没有序列化
我们除了使用自带的redisTemplate还自己可以自定义一个新的自己的配置类
只要使用@Configuration注解去定义一个新的api
使用@AutoWrited注解注入redisTemplate之后opsForValue().set("user", xxx)
直接传对象报错，说没有序列化，所有的对象需要序列化
使用的对象要implements Serializable
这样序列化之后就可以正常传输了
我们自己写的redisConfig中要配置具体的序列化方式
有一个固定的模板，用的时候拿过来用，直接用<String,Object>
编写一个自己的redisTemplate
之后导入的redisTemplate要是我们自己的
公司一般有自己的redisUtil
所有redis操作，其实对于java开发人员来说十分简单，更重要的是要理解思想和应用场景

config配置文件里面有绑定ip，保护模式，端口设置，后台运行的pid文件，日志等级，日志的文件位置，默认数据库的数量，是否显示logo，快照
咱们做持久化就是在规定时间内执行力多少次操作，则会持久化到文件
.rdb .aof
redis是内存数据库，如果没有持久化，那么断电既失
save 900 1 如果900秒内至少有一个key进行了修改，我们就进行持久化操作
save300 10 如果30s内至少有10个key进行了修改，我们就进行持久化操作
save 60 10000 
我们之后学习持久化之后会自己定义这个
config里面还有持久化出错了是否继续工作们是否压缩rdb文件，需要消耗一些cpu的资源
保存rdb的时候是否进行校验，eab保存目录

如果说需要登陆密码就config set requirepass "giao"
默认是没有密码的
获取密码用config get requirepass

在配置文件中可以限制客户端，比如客户端数量maxclients 1000
还有内存设置最大内存 maxmemory xxx
还有配置内存达到上限之后的处理策略maxmemory-policy noeviction

AOF模式：appendonly no AOF默认是不开启的，默认是使用rdb完全够用
appendfilename "appendfilename.aof"
appendfsync always 每次修改都会同步，消耗性能
appendfsync everysec 每秒执行一次sync，可能会求实这一秒的数据
appendfsync no 不执行sync，这时候操作系统自己同步数据，这样效率最快

持久化
面试和工作持久化都是重点
持久化就是在指定时间内讲内存中的数据集快照写入磁盘中，它恢复的时候就是将快照文件直接读到内存中
默认的是RDB，一般情况不需要修改这个配置
rdb文件时dump.rdb
配置文件中有一些关于快照的一些配置
save方法可以保存一些文件
save 60 5 60秒内修改了5次key，就会触发rdb操作
使用save命令直接可以保存
保存完之后设置一些东西
set k1 v1
set k2 v2
set k3 v3
set k4 v4
set k4 v5  这时候发现目录里面多了一个rdb文件
shutdown
exit
redis-server redis.config
redis-cli -p 6379
这样启动之后之前的kv依旧存在
flushDb
flushall
也会快速生成rdb文件
出发规则第一个是save条件满足或者flushall的时候，还有个退出redis的时候也会产生
如果想恢复rdb文件，我们把它放进redis的启动目录就行了，redis启动时会自动检车dump.rdb文件并恢复其中的数据
config get dir
如果在这个文件夹中存在dump.rdb文件，启动时就会自动恢复其中的数据
对数据的完整性要求不高
缺点就是需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改的数据就没了
fork进程的时候会占用一定的内存空间
有时候在生产环境我们会将这个文件备份
正常来说不要修改默认的配置

AOF （Append Only File）
将我们所有的命令都记录下来，恢复的时候会将这个文件全部重新执行一遍
aof保存的文件是appendonly.aof文件
在配置文件中默认是不开启的，需要手动开启appendonly yes
一般情况下不要修改配置文件的名字
rm -rf dump.rdb
ls
shutdown
redis-server redis.config
redis-cli -p 6379
ping
重启redis就可以生效了，文件是在上次退出时产生的
set k1 v1
set k2 v2
set k3 v3
set k4 v4
set k4 v5
过一秒之后这些命令就存起来了
以日志级别去记录所有写操作
如果文件被破坏，可以依靠redis-check-aof
redis-cli -p 6379
aof文件有问题的话是无法启动redis的
如果配置文件有错误，这个时候redis是启动不起来的，我们要修复aof文件，redis给我们提供了一个工具叫做redis-check-aof，但是rdb没有
redis-check-aof --fix appendonly.aof
如果文件正常，重启就可以恢复了

优点和缺点
一种是全丢，一种是丢错误的数据
每一次修改都同步
这样文件的完整性就会更加好
每秒同步一次，可能会丢失一秒的数据
先不同步，效率最高的！
相待i与数据文件，aof远远大于rdb，修复速度也比edb慢
aof运行效率也比radb慢，所以我们redis默认的配置就是rdb持久化
rewrite 在配置中有重写规则的配置，如果一个文件大于定义的大小，就会fork一个新的进程将我们的文件重写
aof默认的就是文件的无限追加，就会越来越大
只做缓存的话，根本不需要用到人恶化持久化

发布和订阅
需要消息发送者，频道，还有消息订阅者
redis-cli -p 6379
ping
subscribe giao 订阅一个频道
之后就一直在等待来消息
再开一个客户端进行发送消息
publish giao "hello,world!" 发布者向频道发送信息
这时候订阅端就能接收到message
unsubscribe giao 取消订阅
原理：redis使用c++实现的，redis-server里面维护了一个字典，字典的键就是一个个频道
微信的订阅号就是这样的，字典里面是链表，订阅的所有人都
使用场景：实时消息系统，实时聊天系统，将信息回显给所有人，订阅关注系统
稍微复杂的场景我们就会用消息中间件去做（MQ）

redis主从复制
一个主人带三个仆从，就组成了一个集群
主从复制就是将一台redis服务器的数据复制到其他的redis服务器前者称为master/leader，后者称为slave/follower
当一台服务器的性能不够用了，那么我们将缓存复制到从机上
从机本质上也是redis-server，本质上是一样的
单向复制，主机以写为主，从机以读为主，我们的目的是把读的压力给主机，读的压力给从机
这样能有效的减少服务器的压力，架构中经常使用
最低配就是一主二从，哨兵模式由选举，所以两台是不行的
主从复制的功能：数据冗余，故障排除，负载均衡，高可用（集群）基石
一般来说，如果将redis运用于工程中时，只用一台主机是万万不能的，因为会出现宕机的情况
单台的redis服务器最大的使用内存不应超过20G，如果大于了，就要考虑换集群了
只要在公司中，主从复制是必须使用的，正式服务器不应该只有一台服务器
一个主节点可以有多个从节点，一个从节点只能有一个主节点

环境配置
只配置从库，不用配置主库，redis本身就是一个主库
info replication 可以看见信息
这里写着role：master

复制三个配置文件，之后修改其中的端口，pid名字，log文件名字，dump.rdb文件的名字
修改之后，我们用三个不同的端口运行redis集群，我们可以查看进程信息
ps -ef|grep redis
默认情况下，每台redis服务器都是主节点
info replication
redis-cli -p xxxx
配置从机的方法就是认老大
现在我们有一个主机两个从机
slaveof 127.0.0.1 6379 就是找谁当自己的老大
info replication
会发现现在这个主机变成了从机
在主机也是可以查到从机的信息
role:slave
info replication
真实的主从配置应该在配置文件中配置，我们上面使用的是命令的，是暂时的
可以在配置文件中replicaof配置这个就可以设置固定的
主机可以写，从机不能写，主机中所有的信息和数据都会自动被从机保存
咱们在主机里面设置的值，在从机中一样可以读到
一旦主机崩了，从机中的信息仍然在
把主机shutdown，我们查看从机之后会发现从机仍是从机，但是没有写操作了，如果要改的话还是要手动
这时候重启启动主机之后新建值从机依旧可以连接到主机的，还会获得主机写的信息
最高级的方法就是主机如果掉了，从从机里面自动选出来一个作为新的主机
主机info replication会发现从机只剩一个了
如果使用的是命令行配置的从机，这个时候如果重启了就会变回主机
如果从机shutdown，之后在开启再变成从机，只要变回了从机i，数据立马就会变回主机中获取的值
复制原理：从机一旦连接到主机之后，立马就会向主机发送一个sync同步命令，master收到命令之后就会启动后台的存盘进程，在后台执行完毕之后，master会将传送整个数据文件到salve，完成一次完全同步
之后如果主机有其他的变化，从机立刻同步那个叫做增量复制
我们的数据一定可以在从机中看到

毛毛虫，一台主机-》从机-》从机
中间那个从节点，既当了从节点，又是后面主机的主节点
但是中间节点仍然是从节点，他是无法进行写入的
这种层层链路的模型 一台主机-》从机-》从机
这个时候也可以完成主从复制
但是以上这两种方式，在工作中根本不会使用

我们要做的事情就是主主机失联了，我们要在从机中找到一个从机成为新的主机
只要执行了slaveof no one就可以使自己称为主节点
谋朝篡位：如果主机断开连接，那么就可以使用slaveof no one把自己变成主机，其他的节点就可以手动连接到这个最新的这个主节点（手动）

哨兵模式：自动选取老大（master）的模式
在一台服务器宕机之后，需要手动把一台从机变成主机，这就需要人共干预，费时费力，一段时间服务器不可用
从redis2.8开始推出了哨兵模式，如果后台监控主机出现故障，就根据投票自动讲从库转换为主库
原理就是哨兵进程通过发哦是那个命令，等待redis服务器响应从而监控运行的多个redis实例
redis-sentinel
哨兵也会死，我们就可以用多哨兵模式，互相监控，组成一个集群
新建一个配置文件
sentinel monitor myredis 127.0.0.1 6379 1
最后一个1是主机挂掉后投票选取新的主机
myredis是被监控的名称

启动哨兵redis-sentinel sentinel.config
这时候如果把主机关闭了或者主机崩溃了，过一会之后，哨兵会选举新的主机
如果master宕机了，就从从机中选择一个服务器，这里有一个算法
哨兵日志里面会有主机从机变换的说明
哨兵把新的主机选举出来之后，我们再次把主机连回来，会自动变成个一个从机
优点：哨兵集群，所有主从配置的缺点都有，主从可以切换，可以转移古装，系统可用性会更好，哨兵就是主从模式的升级，手动到自动
缺点：redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦，实现哨兵模式其实是很麻烦的，里面有很多选择
哨兵模式的全部配置有很多
如果有多个哨兵（哨兵集群），我们要配置哨兵的端口port
dir /tmp 默认的目录
同步时间
出现问题可以执行指定的脚本进行通知啥的，一般是由运维来写
sentinel client-reconfig-script mymaster /var/redis/reconfig.sh

缓存穿透与雪崩
面试高频，工作常用
（查不到）
查东西，先去缓存里面看看有没有，没有的话，再去数据库中找
布隆过滤器：把所有可能查询的参数以hash的形式存贮，在控制层先进行校验，不符合的丢弃，从而避免了对底层存储层的压力
缓存空对象：查询的时候在缓存中存一个空对象，用户再差会查到这个空对象就好了
（量太多，缓存过期）
缓存击穿：如果一个key非常热点，在不停的扛着大并发，比如微博热搜经常导致微博服务器宕机
空档期0.1s接受过大请求
设置热点数据永不过期：没有设置过期时间，就不会出现热点key过期后产生的问题，但是一旦redis满了，总会清除一些
加互斥锁：加锁保证只有一个线程进去，其余的进行等待
缓存雪崩：某个时间段内，缓存集中失效，所有的redis全部失效了
如果产生了波峰压力，之后缓存失效的时候就会雪崩
最麻烦的是服务器自然形成的雪崩
双十一的时候阿里是停掉一些夫，保证主要服务可用
解决
redis高可用：增多集群中redis服务器的数量
限流降级：缓存失效后，通过加锁或者队列来控制读取数据库写缓存的线程数量，比如只允许一个线程查询数据和写缓存，其他线程等待
数据预热：如果要 加大访问量，那么就提前手动去触发加载不同的key，设置不同的缓存时间，让缓存失效的时间尽量均匀

spring的目的就是简化企业中开发










